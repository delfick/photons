---

# Implementation detail of photons means these field names are already taken
# by attributes on the packet objects
invalid_field_names: ["payload", "count", "index", "fields", "Meta"]

num_reserved_fields_in_frame: 5

namespace_order: ["core", "discovery", "device", "light"]

ignore:
  TileEffectParameter: {}
  MultiZoneEffectParameter: {}
  TileAccelMeas:
    expanded: true
  ButtonBacklightHsbk:
    expanded: true

output:
  - create: enums
    dest: "enums.py"
    static: |
      from enum import Enum


      class Direction(Enum):
          RIGHT = 0
          LEFT = 1
          BACKWARD = 0
          FORWARD = 1

  - create: fields
    dest: "fields.py"
    static: |
      from photons_messages import enums

      from photons_protocol.packets import dictobj
      from photons_protocol.messages import T

      from delfick_project.norms import sb
      from lru import LRU
      import random


      def tile_effect_parameters_for(typ):
          if typ is enums.TileEffectType.SKY:
              yield (
                  "sky_type",
                  T.Uint8.enum(enums.TileEffectSkyType).default(enums.TileEffectSkyType.CLOUDS),
              )
              yield ("parameter2", T.Reserved(24))
              yield ("cloud_saturation_min", T.Uint8.default(51))
              yield ("parameter4", T.Reserved(24))
              yield ("cloud_saturation_max", T.Uint8.default(178))
              yield ("parameter6", T.Reserved(184))
          else:
              for i in range(8):
                  yield ("parameter{0}".format(i), T.Reserved(32))


      def multizone_effect_parameters_for(typ):
          if typ is enums.MultiZoneEffectType.MOVE:
              yield ("parameter1", T.Reserved(32))
              yield ("speed_direction", T.Uint32.enum(enums.Direction).default(enums.Direction.RIGHT))
              for i in range(6):
                  yield ("parameter{0}".format(i + 2), T.Reserved(32))
          else:
              for i in range(8):
                  yield ("parameter{0}".format(i), T.Reserved(32))


  - create: packets
    dest: "messages.py"
    options:
      include: "*"
    static: |
      from photons_messages import enums, fields
      from photons_messages.frame import msg

      from photons_protocol.messages import T, Messages, MultiOptions
      from photons_protocol.types import Optional

      from delfick_project.norms import sb
      import math


      def empty(pkt, attr):
          return pkt.actual(attr) in (Optional, sb.NotSpecified)


      def color_zones_response_count(req, res):
          req_count = max([1, ((req.end_index - req.start_index) // 8) + 1])
          res_count =  math.ceil(res.zones_count / 8)
          return min([req_count, res_count])


types:
  duration_type:
    type: uint32
    size_bits: 32
    default: "0"
    extras:
      - |
        transform(
              lambda _, value: int(1000 * float(value))
            , lambda _, value: float(value) / 1000
            )
      - "allow_float()"

  extended_duration_type:
    type: uint64
    size_bits: 64
    default: "0"
    extras:
      - |
        transform(
              lambda _, value: int(1e9 * float(value))
            , lambda _, value: float(value) / 1e9
            )
      - "allow_float()"

  scaled_hue:
    type: uint16
    size_bits: 16
    extras:
      - |
        transform(
              lambda _, v: int(round(0x10000 * (0 if v is sb.NotSpecified else float(v)) / 360)) % 0x10000
            , lambda _, v: round(float(v) * 360 / 0x10000, 2)
            )
      - "allow_float()"

  scaled_to_65535:
    type: uint16
    size_bits: 16
    extras:
      - |
        transform(
              lambda _, v: int(round(0xFFFF * (0 if v is sb.NotSpecified else float(v))))
            , lambda _, v: round(float(v) / 0xFFFF, 4)
            )
      - "allow_float()"

  nano_to_seconds:
    type: uint64
    size_bits: 64
    extras:
      - |
        transform(
              lambda _, v: int(v * 1e9)
            , lambda _, v: v / 1e9
            )
      - "allow_float()"

  waveform_period:
    type: uint32
    size_bits: 32
    default: "0"
    extras:
      - |
        transform(
              lambda _, value: int(1000 * float(value))
            , lambda _, value: float(value) / 1000
            )
      - "allow_float()"

  waveform_skew_ratio:
    type: int16
    size_bits: 16
    default: "0"
    extras:
      - |
        transform(
              lambda _, v: int(65535 * (0 if v is sb.NotSpecified else float(v))) - 32768
            , lambda _, v: float(v + 32768) / 65535
            )
      - "allow_float()"

clones:
  hsbk_with_optional:
    cloning: LightHsbk
    fields:
      Hue:
        more_extras: ["optional()"]
      Saturation:
        more_extras: ["optional()"]
      Brightness:
        more_extras: ["optional()"]
      Kelvin:
        remove_default:  true
        more_extras: ["optional()"]

changes:
  ButtonAction:
    fields:
      Target:
        union_enum: ButtonTargetType
        union_switch_field: target_value
    multi_options:
      name: ButtonAction

  Button:
    multi_options:
      name: Button

  ButtonSet:
    fields:
      Index:
        rename: button_index

  ButtonState:
    fields:
      Index:
        rename: button_index
      Count:
        rename: total_count

  DeviceStateUnhandled:
    namespace: core

  DeviceService:
    rename: Services

  DeviceAcknowledgement:
    namespace: core

  DeviceSetLabel:
    fields:
      Label:
        string_type: true

  DeviceStateLabel:
    using: DeviceSetLabel

  DeviceSetLocation:
    fields:
      Label:
        string_type: true

  DeviceStateLocation:
    using: DeviceSetLocation

  DeviceSetGroup:
    fields:
      Label:
        string_type: true

  DeviceStateGroup:
    using: DeviceSetGroup

  DeviceGetService:
    namespace: discovery
    multi: "-1"

  DeviceStateService:
    namespace: discovery

  DeviceStateVersion:
    fields:
      Version:
        default: "0"

  DeviceEchoRequest:
    fields:
      Payload:
        rename: echoing

  DeviceEchoResponse:
    using: DeviceEchoRequest

  DeviceStateInfo:
    fields:
      Uptime:
        special_type: nano_to_seconds
      Downtime:
        special_type: nano_to_seconds

  LightGet:
    rename: GetColor

  LightSetColor:
    rename: SetColor
    fields:
      Duration:
        special_type: duration_type

  LightWaveform:
    rename: Waveform

  LightGetPower:
    rename: GetLightPower

  LightSetPower:
    rename: SetLightPower
    fields:
      Duration:
        special_type: duration_type

  LightStatePower:
    rename: StateLightPower

  LightState:
    fields:
      Label:
        string_type: true

  LightHsbk:
    rename: hsbk
    multi_options:
      name: Color
      cache_amount: 8000
    fields:
      Hue:
        special_type: scaled_hue
      Saturation:
        special_type: scaled_to_65535
      Brightness:
        special_type: scaled_to_65535
      Kelvin:
        default: "3500"

  LightSetWaveformOptional:
    fields:
      Stream:
        default: "0"
      Transient:
        default: "0"
      Color:
        override_struct: hsbk_with_optional
      Period:
        special_type: waveform_period
      Cycles:
        default: "1"
      SkewRatio:
        special_type: waveform_skew_ratio
      Waveform:
        default: SAW
      SetHue:
        default: 'lambda pkt: 0 if empty(pkt, "hue") else 1'
      SetSaturation:
        default: 'lambda pkt: 0 if empty(pkt, "saturation") else 1'
      SetBrightness:
        default: 'lambda pkt: 0 if empty(pkt, "brightness") else 1'
      SetKelvin:
        default: 'lambda pkt: 0 if empty(pkt, "kelvin") else 1'

  LightSetWaveform:
    fields:
      Stream:
        default: "0"
      Transient:
        default: "0"
      Period:
        special_type: waveform_period
      Cycles:
        default: "1"
      SkewRatio:
        special_type: waveform_skew_ratio
      Waveform:
        default: SAW

  MultiZoneSetColorZones:
    fields:
      Apply:
        default: APPLY
      Duration:
        special_type: duration_type
    multi: |
      MultiOptions(
           lambda req: [MultiZoneMessages.StateZone, MultiZoneMessages.StateMultiZone]
         , lambda req, res: color_zones_response_count(req, res)
         )

  MultiZoneGetColorZones:
    multi: |
      MultiOptions(
           lambda req: [MultiZoneMessages.StateZone, MultiZoneMessages.StateMultiZone]
         , lambda req, res: color_zones_response_count(req, res)
         )

  MultiZoneStateZone:
    fields:
      Count:
        rename: zones_count
      Index:
        rename: zone_index

  MultiZoneStateMultiZone:
    fields:
      Count:
        rename: zones_count
      Index:
        rename: zone_index
      Color:
        rename: colors

  MultiZoneGetEffect:
    rename: GetMultiZoneEffect

  MultiZoneSetEffect:
    rename: SetMultiZoneEffect

  MultiZoneStateEffect:
    rename: StateMultiZoneEffect
    using: MultiZoneSetEffect

  MultiZoneEffectSettings:
    fields:
      Instanceid:
        extras: "default(lambda pkt: random.randrange(1, 1<<32))"
      Type:
        default: "MOVE"
        allow_unknown_enums: true
      Speed:
        special_type: duration_type
        default: "5"
      Duration:
        special_type: extended_duration_type
      Parameter:
        rename: parameters
        extras: "dynamic(lambda pkt: multizone_effect_parameters_for(pkt.type))"

  MultiZoneExtendedGetColorZones:
    rename: GetExtendedColorZones

  MultiZoneExtendedSetColorZones:
    rename: SetExtendedColorZones
    fields:
      Duration:
        special_type: duration_type
      Apply:
        default: "APPLY"
      Index:
        rename: zone_index

  MultiZoneExtendedStateMultiZone:
    rename: StateExtendedColorZones
    fields:
      Count:
        rename: zones_count
      Index:
        rename: zone_index

  RelayGetPower:
    rename: GetRPower

  RelaySetPower:
    rename: SetRPower

  RelayStatePower:
    rename: StateRPower

  TileStateDevice:
    multi_options:
      name: Tile

  TileGet64:
    multi: |
      MultiOptions(
           lambda req: TileMessages.State64
         , lambda req, res: MultiOptions.Max(req.length)
         )

  TileSet64:
    fields:
      Duration:
        special_type: duration_type

  TileEffectSettings:
    fields:
      Instanceid:
        extras: "default(lambda pkt: random.randrange(1, 1<<32))"
      Type:
        default: "OFF"
        allow_unknown_enums: true
      Speed:
        special_type: duration_type
        default: "5"
      Duration:
        special_type: extended_duration_type
      Parameter:
        rename: parameters
        extras: "dynamic(lambda pkt: tile_effect_parameters_for(pkt.type))"

  TileGetEffect:
    rename: GetTileEffect

  TileSetEffect:
    rename: SetTileEffect
    reserved_start: 8

  TileStateEffect:
    rename: StateTileEffect
    reserved_start: 8
