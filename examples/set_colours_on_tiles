#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.tasks import task_register as task

from photons_control.script import FromGenerator
from photons_messages import DeviceMessages
from photons_canvas import Canvas

import logging
import random

log = logging.getLogger("info")


@task
class set_colors(task.Task):
    """
    Set any matrix devices we find on the network to specific colors

    You can specify only specific devices by giving a matcher. For example:

    ``set_colours_on_tiles d073d5000001,d073d5000002``

    or

    ``set_colours_on_tiles match:group_name=kitchen``
    """

    target = task.requires_target()
    reference = task.provides_reference(special=True)

    async def execute_task(self, **kwargs):
        def e(error):
            log.error(error)

        def layer(point, canvas):
            return (random.randint(0, 360), 1, 0.2, 3500)

        canvas = Canvas()

        async def gen(reference, sender, **kwargs):
            plans = sender.make_plans("parts")
            async for serial, _, info in sender.gatherer.gather(plans, reference, **kwargs):
                for part in info:
                    if not part.device.cap.has_matrix:
                        continue
                    canvas.add_parts(part)

                yield DeviceMessages.SetPower(level=65535, target=serial, res_required=False)
                for msg in canvas.msgs(layer, acks=True):
                    yield msg

        await self.target.send(FromGenerator(gen), self.reference, error_catcher=e)


if __name__ == "__main__":
    __import__("photons_core").run("lan:set_colors {@:1:}")
