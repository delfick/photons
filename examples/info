#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.tasks import task_register as task

from photons_control.planner import Skip
from photons_products import Zones

from delfick_project.addons import addon_hook
import logging

log = logging.getLogger("info")


def make_list(infos):
    val = ""
    for thing in infos:
        if isinstance(thing, str):
            val = f"{val}\n      * {thing}"
        else:
            if not thing[0].startswith("reserved"):
                val = f"{val}\n      * {thing[0]}: {thing[1]}"
    return val


@task
class info(task.Task):
    target = task.requires_target()
    reference = task.provides_reference(special=True)

    async def execute_task(self, **kwargs):
        def error(e):
            log.error(e)

        async with self.target.session() as sender:
            plans = sender.make_plans("state", "address", "capability", "zones", "firmware")

            async for serial, complete, info in sender.gatherer.gather_per_serial(
                plans, self.reference, error_catcher=error, find_timeout=30
            ):
                infos = []

                for key, val in sorted(info.items()):
                    if val is Skip:
                        continue

                    if key == "capability":
                        specs = [
                            ("name", val["product"].name),
                            ("family", val["product"].family.value),
                        ]
                        for k, v in val["cap"].items():
                            if k.startswith("has") and v:
                                specs.append(k[4:])
                            else:
                                if isinstance(v, Zones):
                                    v = v.name
                                if v:
                                    specs.append((k, v))
                        val = make_list(specs)

                    elif key == "zones":
                        vl = []
                        for zi, color in val:
                            vl.append(f"      Zone {zi}: {repr(color)}")
                        val = "\n{}".format("\n".join(vl))

                    elif key == "address":
                        val = make_list(zip(("ip", "port"), val))

                    else:
                        val = make_list(sorted(val.items()))

                    if key == "capability":
                        key = "product"

                    infos.append(f"{key}: {val}")

                info_string = "\n    {0}".format("\n    ".join(infos))
                print(f"{serial}: {info_string}\n")


if __name__ == "__main__":
    __import__("photons_core").run("lan:info {@:1:}")
