#!/usr/bin/python -ci=__import__;o=i("os");s=i("sys");a=s.argv;p=o.path;y=p.join(p.dirname(a[1]),".python");o.execv(y,a)

from photons_app.tasks import task_register as task

from photons_canvas.animations import (
    Animation,
    Finish,
    options,
    AnimationTask,
)
from photons_canvas import point_helpers as php

from delfick_project.norms import dictobj, sb
import logging
import random

log = logging.getLogger("tile_animation")


class Options(dictobj.Spec):
    color = dictobj.Field(options.color_range_spec("rainbow"))
    min_dots_per_tick = dictobj.Field(sb.integer_spec, default=20)


class State:
    def __init__(self, options):
        self.color = options.color.color
        self.remaining = {}
        self.min_per_tick = options.min_dots_per_tick
        if self.min_per_tick <= 0:
            self.min_per_tick = 1

    def add_parts(self, parts):
        for part in parts:
            for point in part.points:
                self.remaining[point] = True

    @property
    def layer(self):
        next_selection = random.sample(
            list(self.remaining), k=min(len(self.remaining), self.min_per_tick)
        )

        def layer(point, canvas):
            """
            We return this function in the ``process_event`` method of the
            animation on the ``tick`` event, which means photons will use it
            to determine what colours to send to the tiles for that tick.

            It is called with only the points that are used by the tiles.

            The animation below says to modify the position of the tiles so
            they are all separate from each other. This means all the points
            will be independent of each other.

            If that align_parts_straight wasn't specified, then the position on
            the tiles themselves would be used and it is possible that multiple
            tiles are using the same point. In this case, the point will be
            called for each part.

            The canvas provided will be the points that were set in the previous
            ``tick`` event.

            Each point is a tuple of ``(col, row)`` and a few helper functions
            exist in the helpers module. For example::

                from photons_canvas import point_helpers as php

                # Return col and row of the point relative to the position of the canvas
                relative_col, relative_row = php.Points.relative(point, canvas.bounds)
            """
            if not self.remaining:
                return php.Color.ZERO

            if point in next_selection:
                del self.remaining[point]
                return self.color
            else:
                return canvas[point]

        return layer


# If this file is imported in a photons module, then we can register this
# animation for use with the ``animate`` action:
#
#   from photons_canvas.animations import an_animation
#
#   @an_animation("example_dots", Options)
#   class Animation:
#       ....
#
# and then the animation can be run ``lifx lan:animate example-dots``
#
# This file is self contained, so registering it wouldn't make much difference


class Animation(Animation):
    """
    An example animation similar to the built in "dots" animation.

    This animation has two options:

    color - :color_range: - default rainbow
        A color specifier that says what colour to use when the animation runs

    min_dots_per_tick - integer - default 20
        The minimum number of dots to turn on per tick. The real "dots" animation
        will use a percentage of the remaining area on the tiles, but for
        simplicity this example just has an absolute number
    """

    align_parts_straight = True

    def setup(self):
        """This method can be used to do any extra setup for all tiles under the animation"""

    async def process_event(self, event):
        """
        This is called for each event related to the running of the animation

        It takes in and event object which has a number of properties on it

        value
            A value associated with the event

        canvas
            The current canvas object used to paint the tiles with

        animation
            The current animation object

        state
            The current state associated with your animation. You can set a new
            state by using ``event.state = new_state``. This new_state will be
            the event.state for the next event

        is_tick
            Is this event a TICK event. This is determined by the animation's
            ``every`` property which is the number of seconds between creating
            a new canvas to paint on the devices. It defaults to 0.075 seconds.

            This event is special and the only one where the return value of
            this function is used. If you want a new canvas to be painted onto
            the devices, you return a Canvas object. Events after this will
            have the last Canvas that was returned. If you don't want new
            values to be painted then return None from this event

            This event will only be used if there are one or more devices used
            by this animation.

        is_error
            For when some error was encountered. The ``value`` is the exception
            that was caught.

        is_end
            When the animation has ended

        is_start
            When the animation has started

        is_user_event
            It's possible to create events yourself and this event happens
            when those are created. It's ``value`` is the event you created.

        is_new_device
            When a device has been added to the animation. The ``value`` is
            the parts associated with that device.

        is_sent_messagse
            When the animation sends messages to the devices. The ``value`` for
            this event are the Set64 messages that were sent
        """
        if event.state is None:
            event.state = State(self.options)

        if event.is_new_device:
            event.state.add_parts(event.value)

        elif event.is_tick:
            if not event.state.remaining:
                if event.canvas.is_parts(brightness=0):
                    raise Finish("Transition complete")

                self.every = 1
                self.duration = 1

            return event.state.layer


# Note that we use the ``AnimationTask`` instead of ``task.Task``
# like we would elsewhere. This task is special and does most of the work for us
# We need to tell it our animation class
# And optionally a name for the animation, run_options, error_catcher and message_timeout
#
# If you give a reference as "help" then it'll take the help output from our animation class
# And print that to the terminal
@task
class tile_animation(AnimationTask):
    animation_kls = Animation
    animation_name = "example dots"

    @property
    def run_options(self, **kwargs):
        # We provide the Animation class and the Options class associated with that animation
        # The last argument is options to create the Options object with, here we
        # we have no non default options.
        # We could instead specify options, for example ``{"color": "red"}``
        return {"animations": [[(Animation, Options), None]], "animation_limit": 1}


if __name__ == "__main__":
    __import__("photons_core").run("lan:tile_animation {@:1:}")
